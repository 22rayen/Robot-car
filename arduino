//libraries to integrate functionality
#include <WiFi.h> //wifi connection
#include <PubSubClient.h> //MQTT messaging
#include <Arduino.h> //Input and output

//define the pins 
#define LED_1  15
#define LED_2  16
const int photoR = 34; 
//variables
int value;
int power;

// Wi-Fi credentials: replace with those of your network
const char* ssid = "TOTOLINK_A800R";  // The name of the WiFi network
const char* password = "13042013"; // The WiFi network passkey

// MQTT broker details: replace with your own
const char* mqtt_server = " 192.168.0.38"; // The MQTT broker's hostname or IP address
const int mqtt_port = 1883;  // MQTT broker port (1883 is default)
const char* mqtt_topic = "TRY";  // MQTT topic to publish messages
// MQTT client name prefix (will add MAC address)
String name = "ESP32Client_";

// Create an instance of the WiFiClient class
WiFiClient espClient;
// Create an instance of the PubSubClient class
PubSubClient client(espClient);

// Timer for publishing every 5 seconds
unsigned long previousMillis = 0;
const long interval = 5000;

void setup() {
  // Start Serial communication
  Serial.begin(115200);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Set MQTT server and port
  client.setServer(mqtt_server, mqtt_port);
}

void loop() {
analogWrite(LED_1,power);
analogWrite(LED_2,power);



  // Connect to MQTT if necessary
  if (!client.connected()) {
    connect();
  }

  // Get the current time
  unsigned long currentMillis = millis();

  // Publish a message every 5 seconds
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    // Your message to publish
    String message = "Value in bits is: " + value;

    // Publish the message to the MQTT topic
    client.publish(mqtt_topic, message.c_str());
    Serial.println("Message sent: Value in bits is:" + value);
  }

  // Allow the PubSubClient to process incoming messages
  client.loop();
}

void connect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.println("Attempting MQTT connection...");

    // Attempt to connect
    if (client.connect(name.c_str())) {
      Serial.println("Connected to MQTT broker");
    } else {
      Serial.print("Failed to connect to MQTT broker, rc=");
      Serial.print(client.state());
      Serial.println("Try again in 5 seconds");
      delay(5000);
    }
  }
}



void mesureLight(){

  value = analogRead(photoR);
  power = map(value, 0, 4095, 255, 0);// suposed to turn the value from the light sensor to how much power would be sent to the led
  Serial.println(value); //by testing the max value was 4095 and the lowest was 0
  Serial.println(power);
  
  delay(100);
}
